<?xml version="1.0" encoding="utf-8" ?> 
<RootTest>
  <Test id="0">
     <Question >Що таке успадкування?</Question>
      <Answer answer ="true">Це процес, завдяки якому об’єкт може набувати властивостей іншого об’єка з додаванням до них ознак, властивих тільки йому. </Answer>
      <Answer answer ="false">Це процес, завдяки якому загальний інтерфейс застосовується до двох або більше схожих (але технічно різних) ситуацій</Answer>
      <Answer answer ="false">Це приховування деталей про роботу класів від об'єктів, що їх використовують або надсилають їм повідомлення</Answer>
      <Answer answer ="false">Це спрощення складної дійсності шляхом моделювання класів, що відповідають проблемі, та використання найприйнятнішого рівня деталізації окремих аспектів проблеми</Answer>
  </Test>
  <Test id="1">
    <Question > Які ви знаєте специфікатори доступу?</Question>
      <Answer answer ="false">public, protected internal, private protected</Answer>
      <Answer answer ="true">public, private, protected</Answer>
      <Answer answer ="false">public, private, internal</Answer>
      <Answer answer ="false">open, public</Answer>
  </Test>
  <Test id="2">
    <Question >Який результат роботи специфікатору достуру public?</Question>
      <Answer answer ="true">Всі відкриті члени базового класу стають відкритими і в похідному</Answer>
      <Answer answer ="false">Всі відкриті члени базового класу стають закритими в похідному</Answer>
      <Answer answer ="false">Захищені члени базового класу досяжні для членів усіх похідних класів цього базового класу</Answer>
      <Answer answer ="false">Всі закриті члени базового класу стають відкритими і в похідному</Answer>
  </Test>
  <Test id="3">
    <Question >Який результат роботи специфікатору достуру private?</Question>
      <Answer answer ="false">Всі відкриті члени базового класу стають відкритими і в похідному</Answer>
      <Answer answer ="false">Захищені члени базового класу досяжні для членів усіх похідних класів цього базового класу</Answer>
      <Answer answer ="false">Всі закриті члени базового класу стають відкритими і в похідному</Answer>
      <Answer answer ="true">Всі відкриті члени базового класу стають закритими в похідному</Answer>
  </Test>
  <Test id="4">
    <Question >
      Що виведе наступний код?
      #include ‹iostream.h›
      class base
      {
        int i;
      public:
        base(int n)
        {
          cout ‹‹ ”Робота конструктора базового класу\n”
          i = n;
        }
        ~base()
        {
          cout‹‹”Робота деструктора базового класу\n”;
        }
        void showi()
        {
          cout ‹‹ i ‹‹ ’\n’;
        }
      }
      class derived : public base
      {
        int j;
      public:
        derived(int n, int m) : base(m)    // Передача аргумента в базовий клас
        {
          cout ‹‹ ”Робота конструктора похідного класу\n”;
          j = n;
        }
        ~derived()
        {
         cout ‹‹ ”Робота деструктора похідного  класу\n”;
        }
        void showj()
        {
          cout ‹‹ j ‹‹ ‘\n’;
        }
      };
      void main()
      {
        derived o(10,20);
        o.showi();
        o.showj();
      }
    </Question>
      <Answer answer ="true">
      ”Робота конструктора базового класу”
      ”Робота конструктора похідного класу”
      ”Робота деструктора похідного  класу”
      ”Робота деструктора базового класу”
      </Answer>
      <Answer answer ="false">
      ”Робота конструктора базового класу”
      ”Робота деструктора базового класу”
      ”Робота конструктора похідного класу”
      ”Робота деструктора похідного  класу”
      </Answer>
      <Answer answer ="false">
      ”Робота конструктора базового класу”
      ”Робота конструктора похідного класу”
      ”Робота деструктора базового класу”
      ”Робота деструктора похідного  класу”
      </Answer>
      <Answer answer ="false">
      ”Робота конструктора базового класу”
      ”Робота конструктора похідного класу”
      ”Робота деструктора базового класу”
      ”Робота деструктора похідного  класу”
      </Answer>
  </Test>
</RootTest>